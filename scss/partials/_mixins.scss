// Button mixins start
@mixin buttons($back-color,$border-color,$color:#fff,$cursor:pointer,$transition:all ease-in 0.3s){
	background-color: $back-color;
	border-color:$border-color;
	color:$color;
	cursor:$cursor;
	transition: $transition;
}

@mixin buttons-hover($back-color,$border-color,$color:#fff){
	background-color: $back-color;
	border-color:$border-color;
}

@mixin animations-frame($name){
	@-webkit-keyframes #{$name}{
		@content;
	}
	@keyframes #{$name}{
		@content;
	}
}

@mixin buttons-active($back-color,$border-color,$color:#fff,$box-shadow:none){
	background-color: $back-color !important;
	border-color:$border-color;
	box-shadow:$box-shadow;
	color:$color;
}

@mixin labels-active($back-color,$border-color,$color:#fff,$box-shadow:none){
	background-color: $back-color !important;
	border-color:$border-color;
	box-shadow:$box-shadow;
	color:$color;
}

@mixin button-trans($back-color,$border-color){
	background-color:$back-color;
	border-color:$border-color;
}

@mixin buttons-focus($back-color,$color:#fff,$box-shadow:none){
	box-shadow:$box-shadow;
	color:$color;
	background-color:$back-color;
}

@mixin buttons-borders($color,$back-color:#fff){
	color:$color;
	background-color:$back-color;
}

@mixin dropdown-hover($back-color,$color:#fff){
	background-color:$back-color;
	color:$color;
}
// Button mixins end

// Label mixin start
@mixin labels-inverse($border-color,$color){
	border-color: $border-color;
	color:$color !important;
}

@mixin labels-badge($back-color:#34495e,$color:#fff){
	background-color: $back-color;
	color:$color;
}
@mixin labels-badge-inverse($color,$back-color:#fff){
	color:$color;
	background-color: $back-color;
}
// Label mixin end


@mixin width($width){
	width:$width;
}


@mixin shadow($shadow...){
	box-shadow:$shadow;

}


@mixin theme-keyframes($name) {
	@-webkit-keyframes #{$name} {
        @content;
    }
	@keyframes #{$name} {
        @content;
    }
}
/* ========================= flex firedction========================= */
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

/* ========================= justify-content========================= */
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    //} @else if $value == space-around {
    //  -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

/* ========================= align-items========================= */
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}
/* =========================flex value======================== */
@mixin flex-value($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}
//placeholder color mixin
@mixin placeholder-color($color){
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $color;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $color;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $color;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $color;
  }
}
/* =========================flex========================= */
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: flex;
}
/* =========================wrap======================== */
@mixin flex-wrap($value: wrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: $value;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}


@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}

/* ========================= transition ========================= */
@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}
/* ========================= END OF background-size ========================= */

/* ========================= transform ========================= */
// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
@mixin userselect($userselect) {
  -webkit-user-select: $userselect;
  -moz-user-select: $userselect;
  -ms-user-select: $userselect;
  user-select: $userselect;
}

// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

@mixin translateX($x) {
  @include transform(translateX($x));
}

@mixin translateY($y) {
  @include transform(translateY($y));
}

// translate and scale
@mixin translateAndScale($tx, $ty, $sx, $sy) {
  @include transform(translate($tx, $ty));
  @include transform(scale($sx, $sy));
}
@mixin scale($x, $y) {
  @include transform(scale($x, $y));
}

// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// animation
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  //@-ms-keyframes #{$animation-name} {
  //    @content;
  //}
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

//box-shadow
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
  box-shadow: $shadow;
}

/* =========================order======================== */
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}
// Cross-axis Alignment
@mixin align-self($align) {
  -webkit-align-self: $align;
  -moz-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}

// Packing Flex Lines
@mixin align-content($align) {
  -webkit-align-content: $align;
  -moz-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}
// Flex shrink
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}
